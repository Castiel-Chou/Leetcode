International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: "a" maps to ".-", "b" maps to "-...", "c" maps to "-.-.", and so on.

For convenience, the full table for the 26 letters of the English alphabet is given below:

A	".-"
B	"-..."
C	"-.-."
D	"-.."
E	"."
F	"..-."
G	"--."
H	"...."
I	".."
J	".---"
K	"-.-"
L	".-.."
M	"--"
N	"-."
O	"---"
P	".--."
Q	"--.-"
R	".-."
S	"..."
T	"-"
U	"..-"
V	"...-"
W	".--"
X	"-..-"
Y	"-.--"
Z	"--.."

Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, "cab" can be written as "-.-.-....-", (which is the concatenation "-.-." + "-..." + ".-"). We'll call such a concatenation, the transformation of a word.

Return the number of different transformations among all words we have.

Example:
Input: words = ["gin", "zen", "gig", "msg"]
Output: 2
Explanation: 
The transformation of each word is:
"gin" -> "--...-."
"zen" -> "--...-."
"gig" -> "--...--."
"msg" -> "--...--."

There are 2 different transformations, "--...-." and "--...--.".
 

Note:

The length of words will be at most 100.
Each words[i] will have length in range [1, 12].
words[i] will only consist of lowercase letters.




import java.util.HashSet;
import java.util.Set;

class Solution {
    public int uniqueMorseRepresentations(String[] words) {
        String[] Morse = new String[]{".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
        Set<String> re = new HashSet();
        for(String word:words){
            StringBuilder sb = new StringBuilder();
            for(char c:word.toCharArray()){
                sb.append(Morse[c - 'a']);
            }
            re.add(sb.toString());
        }
        return re.size();
    }
    public static void main(String args[]){
        String[] words = new String[]{"gin", "zen", "gig", "msg"};
        Solution sol = new Solution();
        System.out.println(sol.uniqueMorseRepresentations(words));
    }
}
